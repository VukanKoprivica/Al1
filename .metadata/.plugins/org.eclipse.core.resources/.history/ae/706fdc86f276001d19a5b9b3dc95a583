package dmi.vi1.search.examples.fourinarow;

import dmi.vi1.search.framework.Action;
import dmi.vi1.search.games.Game;
import dmi.vi1.search.games.GameState;

import static dmi.vi1.search.examples.fourinarow.FourInARowBoard.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class FIARMain extends Game {


	

	public FIARMain() {
		gameActionsFunction = new FIARActionFunction();
		gameResultFunction = new FIARResultFunction();
	}

	@Override
	protected int computeUtility(GameState state) {
		// TODO Auto-generated method stub
		if(((FourInARowBoard)state.getBoard()).someOneWon()) {
			if((int)state.getPlayerToMove()==RED_DOT) {
				return 1;
			}else {
				return -1;
			}
		}
		return 0;
	}

	@Override
	protected boolean terminalTest(GameState state) {
		// TODO Auto-generated method stub
		return ((FourInARowBoard)state.getBoard()).isTerminalState();
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		FIARMain game  = new FIARMain();
		int [][] matrica={
				{EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY},
				{EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY},
				{EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY},
				{EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY,EMPTY}
				};
		GameState gameState= new GameState(RED_DOT,matrica);
		BufferedReader br  = new BufferedReader(new InputStreamReader(System.in));
		
		while(true) {
			
			Action a = game.minimaxDecision(gameState);
			gameState =game.makeMove(gameState, a);
			System.out.println((FourInARowBoard)gameState.getBoard());
			if(game.terminalTest(gameState)) {
				break;
			}
			
			
		}
		
		switch (game.computeUtility(gameState)) {
		case 1:{
				System.out.println("PC pobedio");
				break;
			}
		case -1:{
				System.out.println("Igrac pobedio");
		}
		default:
			break;
		}
		
		
		

	}

}
